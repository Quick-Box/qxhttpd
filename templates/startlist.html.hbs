{{#*inline "page"}}

    <h2>Start list</h2>
    <h3><a href="/event/{{ event.id }}">{{ event.name }} {{#if (gt event.stage_count 1)}} E{{ event.stage }} {{/if}}</a></h3>
    <div class="w3-bar">
        {{#if user}}
            <button onclick="newEntry()" class="w3-button w3-theme w3-round-large">New entry</button>
        {{/if}}
    </div>
    <div>
    {{#each classes}}
        <a class="w3-button" href="/event/{{ ../event.id }}/startlist?class_name={{this.name}}">{{ this.name }}</a>
    {{/each}}
    </div>

    <div class="w3-bar w3-theme-l2">
        <span class="w3-bar-item"><b>{{classrec.name}}</b></span>
        <span class="w3-bar-item w3-right">controls: {{classrec.control_count}}</span>
        <span class="w3-bar-item w3-right">climb: {{classrec.climb}}</span>
        <span class="w3-bar-item w3-right">length: {{classrec.length}}</span>
    </div>

    <table id="table" data-start00="{{ start00 }}" class="w3-table-all w3-hoverable">
        <thead>
            <tr class="w3-theme-l1">
                {{#if user}}
                    <th data-fn-name="editEntry" data-id-field-name="run_id" data-field-type="EditRow">Edit</th>
                {{/if}}
                <th data-field-name="start_time" data-field-type="RelativeToStartObTime" class="w3-right-align">Start</th>
                <th data-field-name="last_name">Last name</th>
                <th data-field-name="first_name">First name</th>
                <th data-field-name="registration">Registration</th>
                <th data-field-name="si_id" class="w3-right-align">SI</th>
                <th data-field-name="run_id" class="w3-right-align">Run Id</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <script src="/js/utils.js"></script>
    <script>
        const runs = {{stringify runs}};
        const changes = {{stringify changes}};

        let table = document.getElementById('table');
        fillTable(table, runs);
        applyChanges(table, changes);

        var edited_entry = {}

        function newEntry() {
            // document.getElementById('btSaveDialog').disabled = true;
            edited_entry = {}
            let dlg = document.getElementById('dlg')
            dlg.querySelector('input[name="first_name"]').value = "";
            dlg.querySelector('input[name="last_name"]').value = "";
            dlg.querySelector('input[name="registration"]').value = "";
            dlg.querySelector('input[name="si_id"]').value = "";
            dlg.style.display='block'
        }
        function editEntry(run_id) {
            // document.getElementById('btSaveDialog').disabled = true;
            let table = document.getElementById('table')
            edited_entry = runs.find(rec => rec.run_id === run_id);
            let dlg = document.getElementById('dlg')
            dlg.querySelector('input[name="first_name"]').value = edited_entry.first_name;
            dlg.querySelector('input[name="last_name"]').value = edited_entry.last_name;
            dlg.querySelector('input[name="registration"]').value = edited_entry.registration;
            dlg.querySelector('input[name="si_id"]').value = edited_entry.si_id;

            dlg.style.display='block'
        }
        function saveDialog(name, registration, si) {
            let dlg = document.getElementById('dlg')
            let change = {}
            let add_change = fldname => {
                let input = dlg.querySelector(`input[name="${fldname}"]`);
                let new_val = input.value.trim()
                if (new_val !== "") {
                    if (input.type === "number") {
                        new_val = Number(new_val);
                    }
                    let orig_val = edited_entry[fldname];
                    if (new_val !== orig_val) {
                        change[fldname] = new_val;
                    }
                }
            }
            add_change("first_name")
            add_change("last_name")
            add_change("registration")
            add_change("si_id")
            if (Object.keys(change).length > 0) {
                if (Object.keys(edited_entry).length === 0) {
                    // new entry
                    change.run_id = 0
                    change.class_name = "{{classrec.name}}"
                }
                else {
                    change.run_id = edited_entry.run_id;
                }
                let note = (() => {
                    let input = dlg.querySelector(`input[name="note"]`);
                    return input.value.trim()
                })();
                const params = new URLSearchParams();
                params.append("data_id", change.run_id);
                if (note) {
                    params.append("note", note);
                }
                fetch(`/api/event/{{ event.id }}/changes/run-update-request?${params}`, {
                    method: 'POST',
                    body: JSON.stringify(change),
                    headers: {
                        'Content-Type': 'application/json',
                    }
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    }
                    else {
                        console.error(`Sending entry update failed, error: HTTP error! Status: ${response.status}`);
                        alert(`Sending entry update failed, error: HTTP error! Status: ${response.status}`);
                    }
                })
            }
            else {
                alert(`Nothing to save.`);
            }
            // document.getElementById('dlg').style.display='none'
        }
        function hideDialog(name, registration, si) {
            document.getElementById('dlg').style.display='none'
        }
        function deleteChange(change_id) {
            if (confirm("Are you sure you want to delete this change?")) {
                const params = new URLSearchParams();
                params.append("change_id", change_id);
                fetch(`/api/event/{{ event.id }}/changes?${params}`, {
                    method: 'DELETE',
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        console.error(`Cannot delete change ID: ${change_id}`);
                        alert(`Cannot delete change ID: ${change_id}, ${response.statusText}`);
                    }
                })
            }
        }
    </script>

    <div id="dlg" class="w3-modal">
        <div class="w3-modal-content w3-card-4 w3-animate-zoom" style="max-width: 400px">

            <div class="w3-padding w3-theme">
                <h2 class="">Edit runner</h2>
            </div>
            <div class="w3-panel">
                <label>
                    First Name
                    <input class="w3-input w3-border" type="text" name="first_name" required>
                </label>
                <label>
                    Last Name
                    <input class="w3-input w3-border" type="text" name="last_name" required>
                </label>
                <label>
                    Registration
                    <input class="w3-input w3-border" type="text" name="registration" required>
                </label>
                <label>
                    SI Card
                    <input class="w3-input w3-border" type="number" name="si_id" required>
                </label>
                <label>
                    Note
                    <input class="w3-input w3-border" type="text" name="note">
                </label>
            </div>

            <div class="w3-padding w3-light-grey">
                <button onclick="hideDialog()" type="button" class="w3-button  w3-round-large w3-red">Cancel</button>
                <button id="btSaveDialog" onclick="saveDialog()" class="w3-button w3-green  w3-round-large w3-right" type="button">Save</button>
            </div>

        </div>
    </div>

{{/inline}}
{{> layout}}
